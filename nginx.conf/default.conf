server {
    listen 8000 default_server;
    root /app/public;

    index index.php index.html index.htm;

    location / {
        try_files $uri $uri/ /index.php$is_args$args;
    }

    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_pass php:9000; # Assuming your PHP service is named "php"
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }
} 
# listen 8000 default_server;: This directive specifies that NGINX should listen on port 8000 for 
# incoming connections. default_server indicates that this block will be the default server block 
# to use if no other block matches the requested server name.

# root /app/public;: This sets the root directory for this server block. In this case, it's set to 
# /app/public, meaning that NGINX will look for files to serve within the public directory.

# index index.php index.html index.htm;: This directive specifies the default files to look for when 
# a directory is requested. In this case, NGINX will try to serve index.php first, then index.html, 
# and finally index.htm.

# location / { ... }: This block handles requests to the root directory (/). It uses the try_files 
# directive to attempt to serve the requested file. If the file is not found, it routes the request 
# to index.php.

# Example: If a user requests http://localhost:8000/somepage, NGINX will first look for a file named 
# somepage. If not found, it will route the request to index.php. location ~ \.php$ { ... }: This block 
# matches requests ending in .php and specifies how NGINX should handle them.

# include fastcgi_params;: This includes FastCGI parameters needed for processing PHP requests.

# fastcgi_pass php:9000;: This specifies that PHP-FPM should handle the PHP processing. It assumes that 
# there is a service named "php" running on port 9000.

# fastcgi_index index.php;: This sets the default PHP file to look for if none is specified in the request.

# fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;: This sets the SCRIPT_FILENAME parameter 
# that is passed to PHP. It specifies the file to be executed.

# Example: If a user requests http://localhost:8000/somepage.php, NGINX will pass the request to PHP-FPM to 
# execute somepage.php.