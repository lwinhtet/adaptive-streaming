version: '3'
services:
  web:
    image: nginx:latest
    ports:
      - '8000:8000'
    volumes:
      - ./nginx.conf/default.conf:/etc/nginx/conf.d/default.conf
      - ./app:/app
    # our services (web, php, mysql, phpmyadmin) are all part of the custom network named my_network. This is
    # good because it allows containers to communicate with each other using their service names.
    networks:
      - my_network

  # web = Name given to the server. We can give any name.
  # image = Image to download and use. ImageName:Version
  # ports = port forwarding, local-machine-port:docker-image-port If we specify 8000:8000 in the YAML file,
  # then it will forward port 8000 of the local machine to port 8000 of the docker image. Any request on the
  # host machine to http://127.0.0.1:8000 will be forwarded to the NGINX server running in the container.
  # volume, The nginx.conf/default.conf file from the local is placed at /etc/nginx/conf.d/default.conf inside the container.

  php:
    build:
      context: .
      dockerfile: PHP.Dockerfile
    volumes:
      - ./app:/app
    networks:
      - my_network

  # Given that, to connect to the MySQL service from your PHP application, you should use the service name defined
  # in the docker-compose.yaml file (mysql) as the hostname.
  mysql:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: ''
      MYSQL_DATABASE: ''
      MYSQL_USER: ''
      MYSQL_PASSWORD: ''
    volumes:
      - mysqldata:/var/lib/mysql
    # volumes: Docker volume named mysqldata is created and the MySQL tables and records
    # data are stored in that docker volume. Check docker volume with "docker volume ls"
    ports:
      - 3306:3306
    networks:
      - my_network

  phpmyadmin:
    # we can login as server = mysql, username = 'lwinhtetthu', password = 'password'
    image: phpmyadmin
    restart: always
    ports:
      - '8888:80'
    # have to connect on 80, only that works
    environment:
      - PMA_ARBITRARY=1
    networks:
      - my_network

volumes:
  mysqldata: {}
networks:
  my_network:
